// Code generated by protoc-gen-go. DO NOT EDIT.
// source: adventar/v1/adventar.proto

package adventar_v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("adventar/v1/adventar.proto", fileDescriptor_c3b1639048342dcd) }

var fileDescriptor_c3b1639048342dcd = []byte{
	// 327 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x7b, 0x2a, 0xb2, 0xc1, 0x82, 0x0b, 0x7a, 0x48, 0xa1, 0x6a, 0x1f, 0x60, 0x43, 0xf5,
	0x2e, 0x94, 0xb6, 0xa8, 0xa0, 0x1e, 0x2a, 0x05, 0x6f, 0xb2, 0x6d, 0xc7, 0x50, 0x68, 0x77, 0xe3,
	0xce, 0xb6, 0xd0, 0xe7, 0xf4, 0x85, 0x24, 0xd9, 0x6c, 0xd8, 0x29, 0x49, 0x73, 0x4b, 0xf2, 0xfd,
	0xf3, 0x31, 0xf9, 0x87, 0xc5, 0x72, 0x7d, 0x00, 0x65, 0xa5, 0x49, 0x0e, 0xa3, 0xc4, 0x3f, 0x8b,
	0xcc, 0x68, 0xab, 0x79, 0x54, 0xbd, 0x1f, 0x46, 0x71, 0x3f, 0xd5, 0x3a, 0xdd, 0x42, 0x52, 0xa0,
	0xe5, 0xfe, 0x27, 0x81, 0x5d, 0x66, 0x8f, 0x2e, 0x19, 0xf7, 0x43, 0x8b, 0x01, 0xd4, 0x7b, 0xb3,
	0x02, 0x2c, 0xe1, 0x80, 0xc0, 0x6c, 0xf5, 0xbd, 0x03, 0x44, 0x99, 0x7a, 0xfe, 0xf0, 0xd7, 0x65,
	0x17, 0xe3, 0x32, 0xc2, 0xbf, 0xd8, 0xe5, 0xdb, 0x06, 0xed, 0x44, 0x6e, 0x41, 0xad, 0xa5, 0x41,
	0x7e, 0x2f, 0x82, 0x2d, 0x04, 0x61, 0x73, 0xf8, 0xdd, 0x03, 0xda, 0x78, 0x78, 0x2e, 0x82, 0x99,
	0x56, 0x08, 0xc3, 0x0e, 0x9f, 0xb3, 0xe8, 0x19, 0x2a, 0xc2, 0x6f, 0xc9, 0x50, 0x40, 0xbc, 0xf5,
	0xae, 0x39, 0x50, 0x39, 0xdf, 0x59, 0x6f, 0x62, 0x40, 0x5a, 0xa8, 0xb4, 0x74, 0x17, 0x0a, 0xbd,
	0xf9, 0x9a, 0x66, 0x4a, 0xea, 0x74, 0x8b, 0x6c, 0xdd, 0xac, 0xa3, 0xb0, 0x55, 0xf7, 0xc1, 0x7a,
	0x53, 0xd8, 0x42, 0xa3, 0x8e, 0x42, 0xaf, 0xbb, 0x11, 0xee, 0xd2, 0xc2, 0x5f, 0x5a, 0xcc, 0xf2,
	0x4b, 0xbb, 0x06, 0xf3, 0x72, 0x67, 0xca, 0x9a, 0x0d, 0xe0, 0x49, 0x83, 0x01, 0xa9, 0x6f, 0x90,
	0x04, 0xaa, 0x06, 0xa7, 0x2c, 0x72, 0x25, 0xe5, 0xe8, 0x78, 0xe2, 0x0c, 0x88, 0x77, 0x72, 0x12,
	0x28, 0x90, 0xb3, 0xb8, 0x6e, 0xea, 0x2c, 0x01, 0x39, 0x6f, 0x79, 0x61, 0x91, 0xab, 0xa4, 0xce,
	0x12, 0x90, 0xf6, 0xa6, 0x9e, 0x58, 0xf7, 0x73, 0x93, 0xaa, 0x57, 0xc5, 0x63, 0x22, 0x71, 0x1f,
	0xdb, 0xe7, 0xc7, 0x8c, 0xb9, 0xad, 0x17, 0x08, 0x86, 0x0f, 0x6a, 0x7e, 0x27, 0x07, 0xde, 0x73,
	0x45, 0x39, 0x82, 0x19, 0x76, 0x96, 0xdd, 0x42, 0xfa, 0xf8, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xab,
	0x9f, 0x3c, 0x2d, 0xe1, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AdventarClient is the client API for Adventar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AdventarClient interface {
	ListCalendars(ctx context.Context, in *ListCalendarsRequest, opts ...grpc.CallOption) (*ListCalendarsResponse, error)
	GetCalendar(ctx context.Context, in *GetCalendarRequest, opts ...grpc.CallOption) (*GetCalendarResponse, error)
	CreateCalendar(ctx context.Context, in *CreateCalendarRequest, opts ...grpc.CallOption) (*Calendar, error)
	UpdateCalendar(ctx context.Context, in *UpdateCalendarRequest, opts ...grpc.CallOption) (*Calendar, error)
	DeleteCalendar(ctx context.Context, in *DeleteCalendarRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListEntries(ctx context.Context, in *ListEntriesRequest, opts ...grpc.CallOption) (*ListEntriesResponse, error)
	CreateEntry(ctx context.Context, in *CreateEntryRequest, opts ...grpc.CallOption) (*Entry, error)
	UpdateEntry(ctx context.Context, in *UpdateEntryRequest, opts ...grpc.CallOption) (*Entry, error)
	DeleteEntry(ctx context.Context, in *DeleteEntryRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*User, error)
}

type adventarClient struct {
	cc *grpc.ClientConn
}

func NewAdventarClient(cc *grpc.ClientConn) AdventarClient {
	return &adventarClient{cc}
}

func (c *adventarClient) ListCalendars(ctx context.Context, in *ListCalendarsRequest, opts ...grpc.CallOption) (*ListCalendarsResponse, error) {
	out := new(ListCalendarsResponse)
	err := c.cc.Invoke(ctx, "/adventar.v1.Adventar/ListCalendars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adventarClient) GetCalendar(ctx context.Context, in *GetCalendarRequest, opts ...grpc.CallOption) (*GetCalendarResponse, error) {
	out := new(GetCalendarResponse)
	err := c.cc.Invoke(ctx, "/adventar.v1.Adventar/GetCalendar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adventarClient) CreateCalendar(ctx context.Context, in *CreateCalendarRequest, opts ...grpc.CallOption) (*Calendar, error) {
	out := new(Calendar)
	err := c.cc.Invoke(ctx, "/adventar.v1.Adventar/CreateCalendar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adventarClient) UpdateCalendar(ctx context.Context, in *UpdateCalendarRequest, opts ...grpc.CallOption) (*Calendar, error) {
	out := new(Calendar)
	err := c.cc.Invoke(ctx, "/adventar.v1.Adventar/UpdateCalendar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adventarClient) DeleteCalendar(ctx context.Context, in *DeleteCalendarRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adventar.v1.Adventar/DeleteCalendar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adventarClient) ListEntries(ctx context.Context, in *ListEntriesRequest, opts ...grpc.CallOption) (*ListEntriesResponse, error) {
	out := new(ListEntriesResponse)
	err := c.cc.Invoke(ctx, "/adventar.v1.Adventar/ListEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adventarClient) CreateEntry(ctx context.Context, in *CreateEntryRequest, opts ...grpc.CallOption) (*Entry, error) {
	out := new(Entry)
	err := c.cc.Invoke(ctx, "/adventar.v1.Adventar/CreateEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adventarClient) UpdateEntry(ctx context.Context, in *UpdateEntryRequest, opts ...grpc.CallOption) (*Entry, error) {
	out := new(Entry)
	err := c.cc.Invoke(ctx, "/adventar.v1.Adventar/UpdateEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adventarClient) DeleteEntry(ctx context.Context, in *DeleteEntryRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adventar.v1.Adventar/DeleteEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adventarClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adventar.v1.Adventar/SignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adventarClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/adventar.v1.Adventar/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdventarServer is the server API for Adventar service.
type AdventarServer interface {
	ListCalendars(context.Context, *ListCalendarsRequest) (*ListCalendarsResponse, error)
	GetCalendar(context.Context, *GetCalendarRequest) (*GetCalendarResponse, error)
	CreateCalendar(context.Context, *CreateCalendarRequest) (*Calendar, error)
	UpdateCalendar(context.Context, *UpdateCalendarRequest) (*Calendar, error)
	DeleteCalendar(context.Context, *DeleteCalendarRequest) (*empty.Empty, error)
	ListEntries(context.Context, *ListEntriesRequest) (*ListEntriesResponse, error)
	CreateEntry(context.Context, *CreateEntryRequest) (*Entry, error)
	UpdateEntry(context.Context, *UpdateEntryRequest) (*Entry, error)
	DeleteEntry(context.Context, *DeleteEntryRequest) (*empty.Empty, error)
	SignIn(context.Context, *SignInRequest) (*empty.Empty, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*User, error)
}

func RegisterAdventarServer(s *grpc.Server, srv AdventarServer) {
	s.RegisterService(&_Adventar_serviceDesc, srv)
}

func _Adventar_ListCalendars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCalendarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdventarServer).ListCalendars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adventar.v1.Adventar/ListCalendars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdventarServer).ListCalendars(ctx, req.(*ListCalendarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adventar_GetCalendar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCalendarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdventarServer).GetCalendar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adventar.v1.Adventar/GetCalendar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdventarServer).GetCalendar(ctx, req.(*GetCalendarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adventar_CreateCalendar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCalendarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdventarServer).CreateCalendar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adventar.v1.Adventar/CreateCalendar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdventarServer).CreateCalendar(ctx, req.(*CreateCalendarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adventar_UpdateCalendar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCalendarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdventarServer).UpdateCalendar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adventar.v1.Adventar/UpdateCalendar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdventarServer).UpdateCalendar(ctx, req.(*UpdateCalendarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adventar_DeleteCalendar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCalendarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdventarServer).DeleteCalendar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adventar.v1.Adventar/DeleteCalendar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdventarServer).DeleteCalendar(ctx, req.(*DeleteCalendarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adventar_ListEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdventarServer).ListEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adventar.v1.Adventar/ListEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdventarServer).ListEntries(ctx, req.(*ListEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adventar_CreateEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdventarServer).CreateEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adventar.v1.Adventar/CreateEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdventarServer).CreateEntry(ctx, req.(*CreateEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adventar_UpdateEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdventarServer).UpdateEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adventar.v1.Adventar/UpdateEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdventarServer).UpdateEntry(ctx, req.(*UpdateEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adventar_DeleteEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdventarServer).DeleteEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adventar.v1.Adventar/DeleteEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdventarServer).DeleteEntry(ctx, req.(*DeleteEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adventar_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdventarServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adventar.v1.Adventar/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdventarServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adventar_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdventarServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adventar.v1.Adventar/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdventarServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Adventar_serviceDesc = grpc.ServiceDesc{
	ServiceName: "adventar.v1.Adventar",
	HandlerType: (*AdventarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCalendars",
			Handler:    _Adventar_ListCalendars_Handler,
		},
		{
			MethodName: "GetCalendar",
			Handler:    _Adventar_GetCalendar_Handler,
		},
		{
			MethodName: "CreateCalendar",
			Handler:    _Adventar_CreateCalendar_Handler,
		},
		{
			MethodName: "UpdateCalendar",
			Handler:    _Adventar_UpdateCalendar_Handler,
		},
		{
			MethodName: "DeleteCalendar",
			Handler:    _Adventar_DeleteCalendar_Handler,
		},
		{
			MethodName: "ListEntries",
			Handler:    _Adventar_ListEntries_Handler,
		},
		{
			MethodName: "CreateEntry",
			Handler:    _Adventar_CreateEntry_Handler,
		},
		{
			MethodName: "UpdateEntry",
			Handler:    _Adventar_UpdateEntry_Handler,
		},
		{
			MethodName: "DeleteEntry",
			Handler:    _Adventar_DeleteEntry_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _Adventar_SignIn_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Adventar_UpdateUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "adventar/v1/adventar.proto",
}
